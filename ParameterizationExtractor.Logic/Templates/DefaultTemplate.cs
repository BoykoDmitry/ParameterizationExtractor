// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ParameterizationExtractor.Logic.Templates
{
    using System.Globalization;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Quipu.ParameterizationExtractor.Logic.Model;
    using Quipu.ParameterizationExtractor.Logic.Helpers;
    using Quipu.ParameterizationExtractor.Logic.Interfaces;
    using ParameterizationExtractor;
    using System.Reflection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DefaultTemplate : DefaultTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\n");
            this.Write("/*\r\nAutogenerated by excavator tool, version ");
            
            #line 14 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Assembly.GetExecutingAssembly().GetName().Version.ToString()));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 15 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\nSource: ");
            
            #line 16 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Schema.DataSource));
            
            #line default
            #line hidden
            this.Write(" \r\nDatabase: ");
            
            #line 17 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Schema.Database));
            
            #line default
            #line hidden
            this.Write(" \r\n*/\r\n\r\nGO\r\n\r\nbegin try\r\nbegin tran\r\n");
            
            #line 24 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 	
foreach (var record in Items.Where(_ => _.IsStartingPoint))
            {

            
            #line default
            #line hidden
            
            #line 28 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"


            
            #line default
            #line hidden
            this.Write("\t--#region ");
            
            #line 30 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(record.TableName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 31 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

				//ProcessedItems = new List<PRecord>();
				ProcessOne(record, null, null);

            
            #line default
            #line hidden
            this.Write("\t--#endregion ");
            
            #line 35 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(record.TableName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 36 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

            }

            
            #line default
            #line hidden
            this.Write(@"commit
end try
--#region catch
begin catch
	declare @Err_msg nvarchar(2048), @Err_svrt int
	select @Err_msg = isnull(error_message(), 'has not been retrieved'), @Err_svrt = error_severity();
	if @@trancount > 0 rollback;
	raiserror (@Err_msg, @Err_svrt, 1) with nowait;
end catch;
--#endregion

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 50 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
  	
	private IList<PRecord> ProcessedItems = new List<PRecord>();

	private ISourceSchema _schema;
	private ISourceSchema Schema
	{
		get {
			_schema = _schema ?? this.Session["schema"] as ISourceSchema;

			return _schema;
		}
	} 

	private IEnumerable<PRecord> _items;
	private IEnumerable<PRecord> Items
	{
		get {
			_items = _items ?? this.Session["source"] as IEnumerable<PRecord>;

			return _items;
		}
	} 

	void ProcessOne (PRecord item, PRecord parentRecord, PDependentTable FK, IList<PRecord> moves = null )
	{
		//Console.WriteLine("Process one entry:{0}, parentRecord:{1}",item.ToString(), parentRecord?.ToString());
		moves = moves ?? new List<PRecord>();
		if (moves.Any(_=>_.Equals(item)))
		{
			//Console.WriteLine("Shit hits the fan !");
			return;
		}

		moves.Add(item);

		
		if (item.Parents.Any())
		{
			//foreach(var parent in item.Parents)
			//	Console.WriteLine("item.Parent {0}", parent.PRecord);
								
			foreach(var parent in item.Parents)
			{						
				if (!ProcessedItems.Any(_=>_.Equals(parent.PRecord))
					&& !moves.Any(_=>_.Equals(parent.PRecord))
				)
				{
					Console.WriteLine("item.Parents, parentRecord:{0}",parent.PRecord?.ToString());
					if (parent.PRecord.SqlBuildStrategy.NoInserts)
					{
						if (parent.PRecord.SqlBuildStrategy.ThrowExecptionIfNotExists)
						{
							IfNotExists(parent.PRecord);
							
        
        #line default
        #line hidden
        
        #line 103 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tRAISERROR(\'Record from table ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.PRecord.TableName));

        
        #line default
        #line hidden
        
        #line 104 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" with unique values ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(SqlHelper.GetNameNormalValueString(parent.PRecord.GetUniqueFields())));

        
        #line default
        #line hidden
        
        #line 104 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" can not be found\', 16, 1) \r\n");

        
        #line default
        #line hidden
        
        #line 105 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

						}

						GenerateSqlForNoExtractionTable(parent.PRecord);						
					}
					else
					{
						//Console.WriteLine("I am going to print GenerateSqlForParent, parentRecord:{0} item {1}",parent.PRecord?.ToString(), item);						
						GenerateSqlForParent(parent.PRecord);						
					}
						
					//foreach(var c in parent.PRecord.Childern)
						//Console.WriteLine("parent.PRecord.Childern {0}", c.PRecord);

					foreach(var c in parent.PRecord.Childern.Where(_=>!moves.Any(t=>t.Equals(_.PRecord))))
					{
						//Console.WriteLine("Process parent children:{0}, parentRecord:{1}",c.PRecord.ToString(), parent.PRecord?.ToString());
						ProcessOne (c.PRecord, parent.PRecord, c.FK,moves);
					}
				}

				SqlHelper.PrepareFieldsForChild(item, parent.PRecord.GetPKVarName(), parent.FK);				
			}
		}

		if (parentRecord != null && FK != null)
			SqlHelper.PrepareFieldsForChild(item, parentRecord.GetPKVarName(), FK);


		GenerateSql(item,parentRecord,FK);

		foreach (var child in item.Childern.Where(_=>!moves.Any(t=>t.Equals(_.PRecord))))
		{
            ProcessOne(child.PRecord, item, child.FK, moves);
			Write("\n");
		}
	}

	void InsertValues(IEnumerable<PField> fields, string tableName)
	{

        
        #line default
        #line hidden
        
        #line 145 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tinsert into ");

        
        #line default
        #line hidden
        
        #line 146 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(tableName));

        
        #line default
        #line hidden
        
        #line 146 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 146 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
Write(string.Join(",",fields.Select(_=>string.Format("[{0}]",_.FieldName))));
        
        #line default
        #line hidden
        
        #line 146 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(") \r\n\t\tvalues (");

        
        #line default
        #line hidden
        
        #line 147 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",",fields.Select(_=>_.ValueToSqlString()))));

        
        #line default
        #line hidden
        
        #line 147 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(")\r\n");

        
        #line default
        #line hidden
        
        #line 148 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

	}

	void IfNotExists(PRecord table)
	{
		if (!string.IsNullOrEmpty(table.GetUniqueSqlWhere()))
		{

        
        #line default
        #line hidden
        
        #line 155 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tif not exists(select * from ");

        
        #line default
        #line hidden
        
        #line 156 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0} where {1}",table.TableName,table.GetUniqueSqlWhere())));

        
        #line default
        #line hidden
        
        #line 156 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" )\t\t\t\t\r\n");

        
        #line default
        #line hidden
        
        #line 157 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
		}
	else 
        
        #line default
        #line hidden
        
        #line 158 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t-- here should be something like if not exists, but unique columns(or values)" +
        " can not be found. \r\n");

        
        #line default
        #line hidden
        
        #line 160 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

	}
    
    void GenerateSqlForNoExtractionTable(PRecord parent)
	{
		if (!ProcessedItems.Any(_=>_.Equals(parent)))
			{
	
        
        #line default
        #line hidden
        
        #line 167 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tdeclare ");

        
        #line default
        #line hidden
        
        #line 168 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0} {1}\n",parent.GetPKVarName(), parent.PkField.MetaData.SqlType)));

        
        #line default
        #line hidden
        
        #line 168 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\tselect ");

        
        #line default
        #line hidden
        
        #line 169 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 169 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 169 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.PkField.FieldName));

        
        #line default
        #line hidden
        
        #line 169 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\tfrom  ");

        
        #line default
        #line hidden
        
        #line 170 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.TableName));

        
        #line default
        #line hidden
        
        #line 170 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("  \r\n\t\twhere ");

        
        #line default
        #line hidden
        
        #line 171 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetUniqueSqlWhere()));

        
        #line default
        #line hidden
        
        #line 171 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 172 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

		ProcessedItems.Add(parent);
		}		
	}

	void GenerateSqlForParent(PRecord parent)
	{
		if (!parent.GetUniqueFields().Any())
			Error("Can not generate sql without PK or unique combination");

		if (!ProcessedItems.Any(_=>_.Equals(parent)))
			{
			var fields = SqlHelper.NotIdentityFields(parent);

        
        #line default
        #line hidden
        
        #line 185 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tdeclare ");

        
        #line default
        #line hidden
        
        #line 186 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 Write(string.Format("{0} {1}\n",parent.GetPKVarName(), parent.PkField.MetaData.SqlType));
			
        
        #line default
        #line hidden
        
        #line 188 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"


        
        #line default
        #line hidden
        
        #line 189 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 189 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
	IfNotExists(parent);

        
        #line default
        #line hidden
        
        #line 190 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t\tbegin \r\n");

        
        #line default
        #line hidden
        
        #line 191 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

				if (parent.IsNumericPK)
				{
					if (parent.IsIdentityPK)
					{
						InsertValues(fields,parent.TableName);

        
        #line default
        #line hidden
        
        #line 197 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tset ");

        
        #line default
        #line hidden
        
        #line 198 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 198 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = SCOPE_IDENTITY()\r\n");

        
        #line default
        #line hidden
        
        #line 199 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

						
					}
					else 
					{

        
        #line default
        #line hidden
        
        #line 204 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t\t\tselect ");

        
        #line default
        #line hidden
        
        #line 205 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 205 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = max(");

        
        #line default
        #line hidden
        
        #line 205 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.PkField.FieldName));

        
        #line default
        #line hidden
        
        #line 205 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(")+1 from ");

        
        #line default
        #line hidden
        
        #line 205 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.TableName));

        
        #line default
        #line hidden
        
        #line 206 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\r\n\t\t\t\tselect ");

        
        #line default
        #line hidden
        
        #line 207 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 207 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = isnull(");

        
        #line default
        #line hidden
        
        #line 207 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 207 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(", 1)\r\n\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 209 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
InsertValues(SqlHelper.InjectSqlVariable(fields,parent.GetPKVarName(),parent.PkField.FieldName),parent.TableName);				
					}
				}
				else
				{
					InsertValues(fields,parent.TableName);

        
        #line default
        #line hidden
        
        #line 215 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tset ");

        
        #line default
        #line hidden
        
        #line 216 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 Write(parent.GetPKVarName());
        
        #line default
        #line hidden
        
        #line 216 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 216 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
Write(parent.PkField.ValueToSqlString());
				}

        
        #line default
        #line hidden
        
        #line 218 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t\tend\r\n\t\t\telse \r\n\t\t\tbegin\r\n\t\t\t\tupdate ");

        
        #line default
        #line hidden
        
        #line 222 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.TableName));

        
        #line default
        #line hidden
        
        #line 222 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\t\tset ");

        
        #line default
        #line hidden
        
        #line 223 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(SqlHelper.GetNameValueForUpdateString(fields.Where(_ => !_.MetaData.IsPK))));

        
        #line default
        #line hidden
        
        #line 223 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\t\twhere ");

        
        #line default
        #line hidden
        
        #line 224 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetUniqueSqlWhere()));

        
        #line default
        #line hidden
        
        #line 224 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\r\n\t\t\t\tselect ");

        
        #line default
        #line hidden
        
        #line 226 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 226 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 226 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.PkField.FieldName));

        
        #line default
        #line hidden
        
        #line 226 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\t\tfrom ");

        
        #line default
        #line hidden
        
        #line 227 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.TableName));

        
        #line default
        #line hidden
        
        #line 227 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\t\twhere ");

        
        #line default
        #line hidden
        
        #line 228 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parent.GetUniqueSqlWhere()));

        
        #line default
        #line hidden
        
        #line 228 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\r\n\t\t\tend ");

        
        #line default
        #line hidden
        
        #line 230 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"


			ProcessedItems.Add(parent);
			}
	}
 	
	void GenerateSql(PRecord child,PRecord parentRecord, PDependentTable FK)
	{
		if (!ProcessedItems.Any(_=>_.Equals(child)))
			{

		var fields = SqlHelper.NotIdentityFields(child);
	
		
        
        #line default
        #line hidden
        
        #line 243 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tdeclare ");

        
        #line default
        #line hidden
        
        #line 244 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 Write(string.Format("{0} {1}\n",child.GetPKVarName(), child.PkField.MetaData.SqlType));
		
		if (child.IsStartingPoint
			&& !string.IsNullOrEmpty(child.GetUniqueSqlWhere()))
		{ 
			IfNotExists(child);

        
        #line default
        #line hidden
        
        #line 250 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tbegin\r\n");

        
        #line default
        #line hidden
        
        #line 252 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

		}
		else if (child.UniqueFields.Any())
		{
        
        #line default
        #line hidden
        
        #line 255 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t\tif not exists(select * from ");

        
        #line default
        #line hidden
        
        #line 256 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0} where {1}",child.TableName,child.GetUniqueSqlWhere())));

        
        #line default
        #line hidden
        
        #line 256 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" ) \r\n\t\t\tbegin\r\n");

        
        #line default
        #line hidden
        
        #line 258 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

		}

		if (!child.PkField.MetaData.IsIdentity
					&& child.PkField.MetaData.FieldType.IsNumericType()
						&& !child.SqlBuildStrategy.AsIsInserts) 
		{

        
        #line default
        #line hidden
        
        #line 265 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tselect ");

        
        #line default
        #line hidden
        
        #line 266 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 266 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = max(");

        
        #line default
        #line hidden
        
        #line 266 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.PkField.FieldName));

        
        #line default
        #line hidden
        
        #line 266 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(")+1 from ");

        
        #line default
        #line hidden
        
        #line 266 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.TableName));

        
        #line default
        #line hidden
        
        #line 267 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\r\n\t\tselect ");

        
        #line default
        #line hidden
        
        #line 268 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 268 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = isnull(");

        
        #line default
        #line hidden
        
        #line 268 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 268 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(", 1)\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 270 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
InsertValues(SqlHelper.InjectSqlVariable(fields,child.GetPKVarName(),child.PkField.FieldName),child.TableName);
		}
		else if (child.PkField.MetaData.IsIdentity)
			{
			InsertValues(fields,child.TableName); 

        
        #line default
        #line hidden
        
        #line 275 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tset ");

        
        #line default
        #line hidden
        
        #line 276 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 276 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = SCOPE_IDENTITY()\r\n");

        
        #line default
        #line hidden
        
        #line 277 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
  
			}
			else
			{
				InsertValues(fields,child.TableName);
        
        #line default
        #line hidden
        
        #line 281 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tset ");

        
        #line default
        #line hidden
        
        #line 282 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 Write(child.GetPKVarName());
        
        #line default
        #line hidden
        
        #line 282 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 282 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
Write(child.PkField.ValueToSqlString());
			}
	  if (child.IsStartingPoint
				&& !string.IsNullOrEmpty(child.GetUniqueSqlWhere()))
		{ 			

        
        #line default
        #line hidden
        
        #line 287 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\t\r\n\t\tend\r\n\telse \r\n");

        
        #line default
        #line hidden
        
        #line 291 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 if (!child.SqlBuildStrategy.ThrowExecptionIfNotExists)
	{
        
        #line default
        #line hidden
        
        #line 292 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tbegin\r\n\t\t\tupdate ");

        
        #line default
        #line hidden
        
        #line 294 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.TableName));

        
        #line default
        #line hidden
        
        #line 294 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\tset ");

        
        #line default
        #line hidden
        
        #line 295 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(SqlHelper.GetNameValueForUpdateString(fields.Where(_ => !_.MetaData.IsPK))));

        
        #line default
        #line hidden
        
        #line 295 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\twhere ");

        
        #line default
        #line hidden
        
        #line 296 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetUniqueSqlWhere()));

        
        #line default
        #line hidden
        
        #line 296 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\r\n\t\t\tselect ");

        
        #line default
        #line hidden
        
        #line 298 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetPKVarName()));

        
        #line default
        #line hidden
        
        #line 298 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 298 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.PkField.FieldName));

        
        #line default
        #line hidden
        
        #line 298 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\tfrom ");

        
        #line default
        #line hidden
        
        #line 299 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.TableName));

        
        #line default
        #line hidden
        
        #line 299 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\t\twhere ");

        
        #line default
        #line hidden
        
        #line 300 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.GetUniqueSqlWhere()));

        
        #line default
        #line hidden
        
        #line 300 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" \r\n\t\tend \r\n");

        
        #line default
        #line hidden
        
        #line 302 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
 }
	else 
	{

        
        #line default
        #line hidden
        
        #line 305 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write("\t\tRAISERROR(\'Record from table ");

        
        #line default
        #line hidden
        
        #line 306 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(child.TableName));

        
        #line default
        #line hidden
        
        #line 306 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" with unique values ");

        
        #line default
        #line hidden
        
        #line 306 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(SqlHelper.GetNameNormalValueString(child.GetUniqueFields())));

        
        #line default
        #line hidden
        
        #line 306 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"
this.Write(" is already in DB, can not insert!\', 16, 1) \t\r\n");

        
        #line default
        #line hidden
        
        #line 307 "C:\Project\Tools\ParameterizationExtractor\ParameterizationExtractor.Logic\Templates\DefaultTemplate.tt"

	}

		}
		else 
			if (child.UniqueFields.Any())
				WriteLine("			End");
	  WriteLine("");
	  ProcessedItems.Add(child);
	  }
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class DefaultTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
