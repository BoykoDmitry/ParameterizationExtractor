<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="ParameterizationExtractor" #>
<#@ import namespace="System.Globalization" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Model" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Common" #>

/*
Autogenerated by excavator. 
*/

GO

begin try
begin tran


<# var items = this.Session["source"] as IEnumerable<PRecord>; #>
<# 	
foreach (var record in items)
            {
				IfNotExists(record);
#>
	Begin
<#
				ProcessOne(record, null, null);
#>
	End
<#
            }
#>


commit

END TRY
BEGIN CATCH
	 DECLARE @szErrorMessage NVARCHAR(4000)
	 SET @szErrorMessage = 'LN: ' + CAST(ERROR_LINE() AS NVARCHAR(20)) + N', ' + CHAR(13) + ERROR_MESSAGE()
	 WHILE @@trancount > 0
		  ROLLBACK TRAN
	 RAISERROR(@szErrorMessage, 16, 1)
END CATCH


<#+  	
	private readonly IList<PRecord> ProcessedItems = new List<PRecord>();

	void ProcessOne (PRecord item, PRecord parentRecord, PDependentTable FK )
	{
		if (item.Parents.Any())
		{
			foreach(var parent in item.Parents)
			{
				if (!ProcessedItems.Any(_=>_.Equals(parent.PRecord)))
				{#>
	<#+IfNotExists(parent.PRecord);
#>
		Begin
<#+
					if (GenerateSql(parent.PRecord))
						SqlHelper.PrepareFieldsForChild(item, parent.PRecord.GetPKVarName(), parent.FK);
#>
		End
<#+
				}
			}
		}

		if (parentRecord != null && FK != null)
			SqlHelper.PrepareFieldsForChild(item, parentRecord.GetPKVarName(), FK);


		GenerateSql(item);

		foreach (var child in item.Childern)
		{
            ProcessOne(child.PRecord, item, child.FK);
			Write("\n");
		}
	}

	void InsertValues(IEnumerable<PField> fields, string tableName)
	{
#>
		insert into <#+Write(tableName);#> (<#+Write(string.Join(",",fields.Select(_=>string.Format("[{0}]",_.FieldName))));#>)
		values (<#+Write(string.Join(",",fields.Select(_=>_.ValueToSqlString())));#>)

<#+
	}

	void IfNotExists(PRecord table)
	{
	if (table.UniqueFields != null && table.UniqueFields.Any() || table.PkField != null && !table.PkField.MetaData.FieldType.IsNumericType())
		{
#>
	if not exists(select top 1 1 from <#+Write(string.Format("{0} {1}",table.TableName,table.GetUniqueSqlWhere()));#> )				
<#+}
		// could be that we need to throw exception here.		
	}
#>
<#+  	
	bool GenerateSql(PRecord parent)
	{
		if (ProcessedItems.Any(_=>_.Equals(parent)))
			return false;

		var fields = SqlHelper.NotIdentityFields(parent);#>
		declare <#+ Write(string.Format("{0} {1}\n",parent.GetPKVarName(), parent.PkField.MetaData.SqlType));#>
<#+
			if (!parent.PkField.MetaData.IsIdentity
					&& parent.PkField.MetaData.FieldType.IsNumericType()) 
		{
#>
		select <#+Write(parent.GetPKVarName());#> = max(<#+Write(parent.PkField.FieldName);#>)+1 
		from <#+Write(parent.TableName);
#>
<#+InsertValues(SqlHelper.InjectSqlVariable(fields,parent.GetPKVarName(),parent.PkField.FieldName),parent.TableName);
		}
		else if (parent.PkField.MetaData.IsIdentity)
			{
			InsertValues(fields,parent.TableName); 
#>
		set <#+ Write(parent.GetPKVarName());#> = SCOPE_IDENTITY()
<#+  
			}
			else
			{
				InsertValues(fields,parent.TableName);#>
		set <#+ Write(parent.GetPKVarName());#> = <#+Write(parent.PkField.ValueToSqlString());
			}
	  Write("\n");
	  ProcessedItems.Add(parent);
	  return true;
	}
#>