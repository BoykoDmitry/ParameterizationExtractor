<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="ParameterizationExtractor" #>
<#@ import namespace="System.Globalization" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Model" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Common" #>

/*
Autogenerated by excavator. 
*/

GO

begin try
begin tran


<# var items = this.Session["source"] as IEnumerable<PTable>; #>
<# foreach(var item in items) 
{	
	ProcessRelation(item, item.Childern);
}
#>


commit

END TRY
BEGIN CATCH
	 DECLARE @szErrorMessage NVARCHAR(4000)
	 SET @szErrorMessage = 'LN: ' + CAST(ERROR_LINE() AS NVARCHAR(20)) + N', ' + CHAR(13) + ERROR_MESSAGE()
	 WHILE @@trancount > 0
		  ROLLBACK TRAN
	 RAISERROR(@szErrorMessage, 16, 1)
END CATCH


<#+  	
	void InsertValues(IEnumerable<PField> fields, string tableName)
	{

	#>
	insert into <#+Write(tableName);#> (<#+Write(string.Join(",",fields.Select(_=>string.Format("[{0}]",_.FieldName))));#>)
	values (<#+Write(string.Join(",",fields.Select(_=>_.ValueToSqlString())));#>)
	<#+
	}

	void IfNotExists(PTable table)
	{
	#>
	if not exists(select top 1 1 from <#+Write(string.Format("{0} {1}",table.TableName,table.GetUniqueSqlWhere()));#> )				
	<#+
	}
#>
<#+  	
	void ProcessRelation(PTable parent, IEnumerable<PTableDependency> children)  
    {  
		//this.Write(SqlHelper.IfExistsSql(parent));
IfNotExists(parent);
		var fields = SqlHelper.NotIdentityFields(parent);
		#>
	Begin
		declare <#+ Write(string.Format("{0} {1}",parent.GetPKVarName(), parent.PkField.MetaData.SqlType));#>
		<#+InsertValues(fields,parent.TableName); #>
			<#+ if (parent.PkField.MetaData.IsIdentity) 
				{#>					 
		set <#+ Write(parent.GetPKVarName());#> = SCOPE_IDENTITY()  
			<#+ } 
				else if (parent.PkField.MetaData.FieldType.IsNumericType() )
				{ #>
					select <#+Write(parent.GetPKVarName());#> = max(<#+Write(parent.PkField.FieldName);#>)+1 
					from <#+Write(parent.TableName);#>
				<#+}
			#>				
			<#+ 
				foreach(var child in children)
				{
					var childFields = SqlHelper.PrepareFieldsForChild(child.PTable, parent.GetPKVarName() , child.FK);
					//IfNotExists(child);
					InsertValues(childFields,child.PTable.TableName);
				}
			#>
	End
		<#+
    }  
#>