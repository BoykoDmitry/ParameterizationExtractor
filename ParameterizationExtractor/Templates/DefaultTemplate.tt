<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="ParameterizationExtractor" #>
<#@ import namespace="System.Globalization" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Model" #>
<#@ import namespace="Quipu.ParameterizationExtractor.Common" #>
<#@ import namespace="ParameterizationExtractor" #>
/*
Autogenerated by excavator tool.
<#=DateTime.Now.ToString()#> 

*/

<# var items = this.Session["source"] as IEnumerable<PRecord>; #>
<# 	
foreach (var record in items)
            {
#>
GO

begin try
begin tran

<#
				IfNotExists(record);
#>
	Begin
<#
				ProcessedItems = new List<PRecord>();
				ProcessOne(record, null, null);
#>
	End


commit

END TRY
BEGIN CATCH
	 DECLARE @szErrorMessage NVARCHAR(4000)
	 SET @szErrorMessage = 'LN: ' + CAST(ERROR_LINE() AS NVARCHAR(20)) + N', ' + CHAR(13) + ERROR_MESSAGE()
	 WHILE @@trancount > 0
		  ROLLBACK TRAN
	 RAISERROR(@szErrorMessage, 16, 1)
END CATCH

<#
            }
#>



<#+  	
	private IList<PRecord> ProcessedItems = new List<PRecord>();

	void ProcessOne (PRecord item, PRecord parentRecord, PDependentTable FK, IList<PRecord> moves = null )
	{
		Console.WriteLine("Process one entry:{0}, parentRecord:{1}",item.ToString(), parentRecord?.ToString());
		moves = moves ?? new List<PRecord>();
		if (moves.Any(_=>_.Equals(item)))
		{
			Console.WriteLine("Shit hits the fan !");
			return;
		}

		moves.Add(item);

		
		if (item.Parents.Any())
		{
			foreach(var parent in item.Parents)
				Console.WriteLine("item.Parent {0}", parent.PRecord);
								
			foreach(var parent in item.Parents)
			{						
				if (!ProcessedItems.Any(_=>_.Equals(parent.PRecord))
					&& !moves.Any(_=>_.Equals(parent.PRecord))
				)
				{
					Console.WriteLine("item.Parents, parentRecord:{0}",parent.PRecord?.ToString());
					if (parent.PRecord.SqlBuildStrategy.NoInserts)
					{
						if (parent.PRecord.SqlBuildStrategy.ThrowExecptionIfNotExists)
						{
							IfNotExists(parent.PRecord);
							#>
		RAISERROR('Record from table <#+Write(parent.PRecord.TableName);#> with unique values <#+Write(SqlHelper.GetNameNormalValueString(parent.PRecord.GetUniqueFields()));#> can not be found', 16, 1) 
<#+
						}

						GenerateSqlForNoExtractionTable(parent.PRecord);						
					}
					else
					{
						Console.WriteLine("I am going to print GenerateSqlForParent, parentRecord:{0} item {1}",parent.PRecord?.ToString(), item);						
						GenerateSqlForParent(parent.PRecord);						
					}
						
					foreach(var c in parent.PRecord.Childern)
						Console.WriteLine("parent.PRecord.Childern {0}", c.PRecord);

					foreach(var c in parent.PRecord.Childern.Where(_=>!moves.Any(t=>t.Equals(_.PRecord))))
					{
						Console.WriteLine("Process parent children:{0}, parentRecord:{1}",c.PRecord.ToString(), parent.PRecord?.ToString());
						ProcessOne (c.PRecord, parent.PRecord, c.FK,moves);
					}
				}

				SqlHelper.PrepareFieldsForChild(item, parent.PRecord.GetPKVarName(), parent.FK);				
			}
		}

		if (parentRecord != null && FK != null)
			SqlHelper.PrepareFieldsForChild(item, parentRecord.GetPKVarName(), FK);


		GenerateSql(item);

		foreach (var child in item.Childern.Where(_=>!moves.Any(t=>t.Equals(_.PRecord))))
		{
            ProcessOne(child.PRecord, item, child.FK, moves);
			Write("\n");
		}
	}

	void InsertValues(IEnumerable<PField> fields, string tableName)
	{
#>
		insert into <#=tableName#> (<#+Write(string.Join(",",fields.Select(_=>string.Format("[{0}]",_.FieldName))));#>) 
		values (<#=string.Join(",",fields.Select(_=>_.ValueToSqlString()))#>)

<#+
	}

	void IfNotExists(PRecord table)
	{
#>
	if not exists(select top 1 1 from <#+Write(string.Format("{0} {1}",table.TableName,table.GetUniqueSqlWhere()));#> )				
<#+}
    
    void GenerateSqlForNoExtractionTable(PRecord parent)
	{
		if (!ProcessedItems.Any(_=>_.Equals(parent)))
			{
	#>
		declare <#=string.Format("{0} {1}\n",parent.GetPKVarName(), parent.PkField.MetaData.SqlType)#> 
		select <#=parent.GetPKVarName()#> = <#=parent.PkField.FieldName#> 
		from  <#=parent.TableName#>  
		<#=parent.GetUniqueSqlWhere()#>
<#+
		ProcessedItems.Add(parent);
		}		
	}

	void GenerateSqlForParent(PRecord parent)
	{
		if (!parent.GetUniqueFields().Any())
			Error("Can not generate sql without PK or unique combination");

		if (!ProcessedItems.Any(_=>_.Equals(parent)))
			{
			var fields = SqlHelper.NotIdentityFields(parent);
#>
		declare <#+ Write(string.Format("{0} {1}\n",parent.GetPKVarName(), parent.PkField.MetaData.SqlType));#>
<#+
#>		<#+	IfNotExists(parent);
#>			Begin 
<#+
				if (parent.IsNumericPK)
				{
					if (parent.IsIdentityPK)
					{
						InsertValues(fields,parent.TableName);
#>
		set <#+ Write(parent.GetPKVarName());#> = SCOPE_IDENTITY()
<#+  
					}
					else 
					{
#>
				select <#=parent.GetPKVarName()#> = max(<#=parent.PkField.FieldName#>)+1 
				from <#=parent.TableName#> 
		<#+InsertValues(SqlHelper.InjectSqlVariable(fields,parent.GetPKVarName(),parent.PkField.FieldName),parent.TableName);				
					}
				}
				else
				{
					InsertValues(fields,parent.TableName);
#>
		set <#+ Write(parent.GetPKVarName());#> = <#+Write(parent.PkField.ValueToSqlString());
				}
#>			End
			Else 
			Begin
				update <#=parent.TableName#> 
				set <#=SqlHelper.GetNameValueForUpdateString(fields)#> 
				<#=parent.GetUniqueSqlWhere()#> 

				select <#=parent.GetPKVarName()#> = <#=parent.PkField.FieldName#> 
				from <#=parent.TableName#> 
				<#=parent.GetUniqueSqlWhere()#> 

			End <#+
			}
	}
 	
	void GenerateSql(PRecord child)
	{
		if (!ProcessedItems.Any(_=>_.Equals(child)))
			{

		var fields = SqlHelper.NotIdentityFields(child);#>
		declare <#+ Write(string.Format("{0} {1}\n",child.GetPKVarName(), child.PkField.MetaData.SqlType));#>
<#+
			if (!child.PkField.MetaData.IsIdentity
					&& child.PkField.MetaData.FieldType.IsNumericType()
						&& !child.SqlBuildStrategy.AsIsInserts) 
		{
#>
		select <#+Write(child.GetPKVarName());#> = max(<#+Write(child.PkField.FieldName);#>)+1 
		from <#+Write(child.TableName);
#>
<#+InsertValues(SqlHelper.InjectSqlVariable(fields,child.GetPKVarName(),child.PkField.FieldName),child.TableName);
		}
		else if (child.PkField.MetaData.IsIdentity)
			{
			InsertValues(fields,child.TableName); 
#>
		set <#+ Write(child.GetPKVarName());#> = SCOPE_IDENTITY()
<#+  
			}
			else
			{
				InsertValues(fields,child.TableName);#>
		set <#+ Write(child.GetPKVarName());#> = <#+Write(child.PkField.ValueToSqlString());
			}
	  Write("\n");
	  ProcessedItems.Add(child);
	  }
	}
#>